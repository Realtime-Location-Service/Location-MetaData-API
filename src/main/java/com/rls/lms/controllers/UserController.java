package com.rls.lms.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.rls.lms.exceptions.JSONProcessingException;
import com.rls.lms.exceptions.MissingHeaderException;
import com.rls.lms.exceptions.MissingRequiredFieldException;
import com.rls.lms.models.User;
import com.rls.lms.repositories.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.util.MultiValueMap;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@RestController    // This means that this class is a Controller
@RequestMapping(path="/users") // This means URL's start with /demo (after Application path)
public class UserController {
    // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private final UserRepository userRepository;

    @Autowired
    public UserController(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    @GetMapping(path="")
    public ResponseEntity<Iterable<User>> getAllUsers(@RequestHeader("RLS-Referrer") String domain,
                                      @RequestParam(value = "status", required = false, defaultValue = "") String status,
                                      @RequestParam(value = "page", required = false, defaultValue = "1") int page,
                                      @RequestParam(value = "size", required = false, defaultValue = "100") int size) {
        if (domain == null || domain.isBlank())
            throw new MissingHeaderException("RLS-Referrer header is not present");

        List<User> result;
        if (status!=null && !status.isEmpty()) {
            result = userRepository.findByStatus(domain, status, PageRequest.of(page-1, size));
        } else {
            result = userRepository.findAll(domain, PageRequest.of(page-1, size));
        }
        // This returns a JSON or XML with the users
        return new ResponseEntity<>(result, HttpStatus.OK);
    }

    @GetMapping(path="", params = { "user_ids" })
    public ResponseEntity<Map<String, User>> getUsers(@RequestHeader("RLS-Referrer") String domain,
                            @RequestParam(value = "user_ids", required = false, defaultValue = "") List<String> userIds) {
        if (domain == null || domain.isBlank())
            throw new MissingHeaderException("RLS-Referrer header is not present");

        HashMap<String, User> result = new HashMap<>();
        userIds.forEach((String id) -> result.putIfAbsent(id, null));

        userRepository.find(domain, result.keySet().toArray(new String[]{})).
                forEach((User u) -> result.replace(u.getUser_id(), u));
        // This returns a JSON or XML with the users
        return new ResponseEntity<>(result, HttpStatus.OK);
    }

    @PostMapping(path="/meta") // Map ONLY POST Requests
    public ResponseEntity<String> addNewUser (@RequestHeader("RLS-Referrer") String domain, @RequestBody User user) {
        checkValidation(domain, user.getUser_id());
        user.setDomain(domain);
        userRepository.save(user);
        return new ResponseEntity<>("User metadata saved successfully!", HttpStatus.OK);
    }

    @PatchMapping(path = "{userId}/meta")
    public ResponseEntity<String> patchMetadata(@RequestHeader("RLS-Referrer") String domain,
                                                @PathVariable String userId,
                                                @RequestBody Map<String, Object> payload) {
        checkValidation(domain, userId);
        if (payload == null)
            throw new MissingRequiredFieldException("metadata is missing or invalid.");

        try {
            userRepository.patch(userId, domain, payload);
        } catch (JsonProcessingException e) {
            throw new JSONProcessingException(e.getMessage());
        }

        return new ResponseEntity<>("User metadata patched successfully!", HttpStatus.OK);
    }

    @PostMapping(path = "/meta/search")
    public ResponseEntity<List> search(@RequestHeader("RLS-Referrer") String domain,
                                       @RequestParam MultiValueMap<String, String> requestParams,
                                       @RequestBody Map<String, Object> queryDSL) {
        if (domain == null || domain.isBlank())
            throw new MissingHeaderException("RLS-Referrer header is not present");

        List result = userRepository.findByQueryDSL(queryDSL, domain, requestParams);

        return new ResponseEntity<>(result, HttpStatus.OK);
    }

    private void checkValidation(String domain, String userId) {
        if (domain == null || domain.isBlank())
            throw new MissingHeaderException("RLS-Referrer header is not present");

        if (userId == null || userId.isBlank())
            throw new MissingRequiredFieldException("user_id is missing or invalid.");
    }
}