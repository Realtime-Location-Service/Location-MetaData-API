package com.rls.lms.controllers;

import com.rls.lms.exceptions.MissingHeaderException;
import com.rls.lms.exceptions.UserNotFoundException;
import com.rls.lms.models.User;
import com.rls.lms.repositories.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;

@RestController    // This means that this class is a Controller
@RequestMapping(path="/api/v1") // This means URL's start with /demo (after Application path)
public class UserController {
    // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private final UserRepository userRepository;

    @Autowired
    public UserController(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    @PostMapping(path="/metadata") // Map ONLY POST Requests
    public ResponseEntity<String> addNewUser (@RequestHeader("RLS-Referrer") String domain, @RequestBody User user) {
        if (domain == null || domain.isBlank())
            throw new MissingHeaderException("RLS-Referrer header is not present");
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        user.setDomain(domain);
        userRepository.save(user);
        return new ResponseEntity<>("User metadata saved successfully!", HttpStatus.OK);
    }

    @GetMapping(path="/metadata/all")
    public ResponseEntity<Iterable<User>> getAllUsers(@RequestHeader("RLS-Referrer") String domain) {
        if (domain == null || domain.isBlank())
            throw new MissingHeaderException("RLS-Referrer header is not present");
        // This returns a JSON or XML with the users
        return new ResponseEntity<>(userRepository.findAll(domain), HttpStatus.OK);
    }

    @PatchMapping(path = "/metadata")
    @SuppressWarnings("unchecked")
    public ResponseEntity<String> setMetadata(@RequestHeader("RLS-Referrer") String domain, @RequestBody Map<String, Object> payload) {
        if (domain == null || domain.isBlank())
            throw new MissingHeaderException("RLS-Referrer header is not present");
        List<User> users = userRepository.findByUser_id((String) payload.get("user_id"), domain);

        if (users.isEmpty())
            throw new UserNotFoundException("No user metadata found for user_id = " + payload.get("user_id"));

        User user = users.get(0);

        Map<String, Object> userMetadata = user.getMetadata();
        Map<String, Object> payloadMetadata = (Map<String, Object>) payload.get("metadata");

        userMetadata.putAll(payloadMetadata);
        userRepository.save(user);

        return new ResponseEntity<>("User metadata patched successfully!", HttpStatus.OK);
    }
}