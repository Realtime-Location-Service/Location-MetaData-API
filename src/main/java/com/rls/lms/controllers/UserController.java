package com.rls.lms.controllers;

import com.rls.lms.models.User;
import com.rls.lms.repositories.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;

@RestController    // This means that this class is a Controller
@RequestMapping(path="/api") // This means URL's start with /demo (after Application path)
public class UserController {
    // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private final UserRepository userRepository;

    @Autowired
    public UserController(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    @PostMapping(path="/create") // Map ONLY POST Requests
    public @ResponseBody
    String addNewUser (@RequestBody User user, @RequestHeader("RLS-Referer") String domain) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request


        userRepository.save(user);
        return "Saved";
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<User> getAllUsers(@RequestHeader("RLS-Referer") String domain) {
        // This returns a JSON or XML with the users
        return userRepository.findAll(domain);
    }

    @PostMapping(path = "/set-meta")
    public @ResponseBody String setMetadata(@RequestBody Map<String, Object> payload, @RequestHeader("RLS-Referer") String domain) {
        List<User> users = userRepository.findByUserId((String) payload.get("userId"), domain);

        User user = users.get(0);

        String metakey = (String) payload.get("metakey");
        String metavalue = (String) payload.get("metavalue");

        if ("userId".equals(metakey)) {
            user.setUserId(metavalue);
        } else {
            Map<String, Object> metadata = user.getMetadata();
            metadata.put(metakey, metavalue);
        }

        userRepository.save(user);
        return "Updated";
    }
}